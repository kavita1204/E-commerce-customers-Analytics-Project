{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "641bbef0-51e9-4a16-a2f6-5633e8c75772",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape: (120, 9)\n",
      "Memory usage: 0.02 MB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 120 entries, 0 to 119\n",
      "Data columns (total 9 columns):\n",
      " #   Column               Non-Null Count  Dtype \n",
      "---  ------               --------------  ----- \n",
      " 0   CustomerID           120 non-null    int64 \n",
      " 1   Age                  120 non-null    int64 \n",
      " 2   Gender               120 non-null    object\n",
      " 3   AnnualIncome         120 non-null    int64 \n",
      " 4   SpendingScore        120 non-null    int64 \n",
      " 5   BrowserType          120 non-null    object\n",
      " 6   PurchaseFrequency    120 non-null    int64 \n",
      " 7   LastPurchaseDaysAgo  120 non-null    int64 \n",
      " 8   DeviceType           120 non-null    object\n",
      "dtypes: int64(6), object(3)\n",
      "memory usage: 8.6+ KB\n",
      "None\n",
      "\n",
      "Missing values:\n",
      " CustomerID             0\n",
      "Age                    0\n",
      "Gender                 0\n",
      "AnnualIncome           0\n",
      "SpendingScore          0\n",
      "BrowserType            0\n",
      "PurchaseFrequency      0\n",
      "LastPurchaseDaysAgo    0\n",
      "DeviceType             0\n",
      "dtype: int64\n",
      "\n",
      "Data types:\n",
      " CustomerID              int64\n",
      "Age                     int64\n",
      "Gender                 object\n",
      "AnnualIncome            int64\n",
      "SpendingScore           int64\n",
      "BrowserType            object\n",
      "PurchaseFrequency       int64\n",
      "LastPurchaseDaysAgo     int64\n",
      "DeviceType             object\n",
      "dtype: object\n",
      "\n",
      "Duplicate rows: 0\n",
      "\n",
      "Numeric summary:\n",
      "         CustomerID        Age   AnnualIncome  SpendingScore  \\\n",
      "count   120.000000  120.00000     120.000000     120.000000   \n",
      "mean   1060.500000   42.67500   68623.966667      48.266667   \n",
      "std      34.785054   13.20629   29992.299637      27.213360   \n",
      "min    1001.000000   19.00000   20178.000000       1.000000   \n",
      "25%    1030.750000   31.75000   43615.500000      28.000000   \n",
      "50%    1060.500000   43.00000   67643.500000      48.000000   \n",
      "75%    1090.250000   52.25000   92256.250000      67.000000   \n",
      "max    1120.000000   65.00000  119184.000000     100.000000   \n",
      "\n",
      "       PurchaseFrequency  LastPurchaseDaysAgo  \n",
      "count         120.000000           120.000000  \n",
      "mean           10.466667            26.858333  \n",
      "std             5.489384            18.204393  \n",
      "min             1.000000             0.000000  \n",
      "25%             6.000000            10.000000  \n",
      "50%            11.000000            26.000000  \n",
      "75%            16.000000            43.000000  \n",
      "max            20.000000            60.000000  \n",
      "\n",
      "Column 'Gender' unique values: 2\n",
      "Gender\n",
      "Female    67\n",
      "Male      53\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Column 'BrowserType' unique values: 5\n",
      "BrowserType\n",
      "Safari     31\n",
      "Chrome     28\n",
      "Edge       25\n",
      "Opera      18\n",
      "Firefox    18\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Column 'DeviceType' unique values: 3\n",
      "DeviceType\n",
      "Tablet     43\n",
      "Desktop    41\n",
      "Mobile     36\n",
      "Name: count, dtype: int64\n",
      "\n",
      "Out-of-range values in 'CustomerID':\n",
      "Series([], Name: CustomerID, dtype: int64)\n",
      "\n",
      "Out-of-range values in 'Age':\n",
      "Series([], Name: Age, dtype: int64)\n",
      "\n",
      "Out-of-range values in 'AnnualIncome':\n",
      "Series([], Name: AnnualIncome, dtype: int64)\n",
      "\n",
      "Out-of-range values in 'SpendingScore':\n",
      "Series([], Name: SpendingScore, dtype: int64)\n",
      "\n",
      "Out-of-range values in 'PurchaseFrequency':\n",
      "Series([], Name: PurchaseFrequency, dtype: int64)\n",
      "\n",
      "Out-of-range values in 'LastPurchaseDaysAgo':\n",
      "Series([], Name: LastPurchaseDaysAgo, dtype: int64)\n",
      "\n",
      "Invalid Gender entries:\n",
      " []\n",
      "Missing values per column:\n",
      " CustomerID             0\n",
      "Age                    0\n",
      "Gender                 0\n",
      "AnnualIncome           0\n",
      "SpendingScore          0\n",
      "BrowserType            0\n",
      "PurchaseFrequency      0\n",
      "LastPurchaseDaysAgo    0\n",
      "DeviceType             0\n",
      "dtype: int64\n",
      "Duplicates before: 0\n",
      "Duplicates after: 0\n",
      "Before types:\n",
      " CustomerID              int64\n",
      "Age                     int64\n",
      "Gender                 object\n",
      "AnnualIncome            int64\n",
      "SpendingScore           int64\n",
      "BrowserType            object\n",
      "PurchaseFrequency       int64\n",
      "LastPurchaseDaysAgo     int64\n",
      "DeviceType             object\n",
      "dtype: object\n",
      "After types:\n",
      " CustomerID              int64\n",
      "Age                     int64\n",
      "Gender                 object\n",
      "AnnualIncome            int64\n",
      "SpendingScore           int64\n",
      "BrowserType            object\n",
      "PurchaseFrequency       int64\n",
      "LastPurchaseDaysAgo     int64\n",
      "DeviceType             object\n",
      "dtype: object\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\KIshan\\AppData\\Local\\Temp\\ipykernel_21416\\3832790332.py:70: FutureWarning: errors='ignore' is deprecated and will raise in a future version. Use to_numeric without passing `errors` and catch exceptions explicitly instead\n",
      "  df[col] = pd.to_numeric(df[col], errors='ignore')\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "📊 Outlier Treatment Summary:\n",
      "\n",
      "▶ Column: CustomerID\n",
      "   - Outlier_Count: 0\n",
      "   - Total_Rows: 120\n",
      "   - Percent: 0.0\n",
      "   - Decision: Capped\n",
      "   - IQR_Bounds: (np.float64(941.5), np.float64(1179.5))\n",
      "\n",
      "▶ Column: Age\n",
      "   - Outlier_Count: 0\n",
      "   - Total_Rows: 120\n",
      "   - Percent: 0.0\n",
      "   - Decision: Capped\n",
      "   - IQR_Bounds: (np.float64(1.0), np.float64(83.0))\n",
      "\n",
      "▶ Column: AnnualIncome\n",
      "   - Outlier_Count: 0\n",
      "   - Total_Rows: 120\n",
      "   - Percent: 0.0\n",
      "   - Decision: Capped\n",
      "   - IQR_Bounds: (np.float64(-29345.62), np.float64(165217.38))\n",
      "\n",
      "▶ Column: SpendingScore\n",
      "   - Outlier_Count: 0\n",
      "   - Total_Rows: 120\n",
      "   - Percent: 0.0\n",
      "   - Decision: Capped\n",
      "   - IQR_Bounds: (np.float64(-30.5), np.float64(125.5))\n",
      "\n",
      "▶ Column: PurchaseFrequency\n",
      "   - Outlier_Count: 0\n",
      "   - Total_Rows: 120\n",
      "   - Percent: 0.0\n",
      "   - Decision: Capped\n",
      "   - IQR_Bounds: (np.float64(-9.0), np.float64(31.0))\n",
      "\n",
      "▶ Column: LastPurchaseDaysAgo\n",
      "   - Outlier_Count: 0\n",
      "   - Total_Rows: 120\n",
      "   - Percent: 0.0\n",
      "   - Decision: Capped\n",
      "   - IQR_Bounds: (np.float64(-39.5), np.float64(92.5))\n",
      "     CustomerID  CustomerTenureDays  AvgOrderValue  DaysSinceLastOrder   Age  \\\n",
      "0        1001.0                2995   29566.500000                31.0  23.0   \n",
      "1        1002.0                2561    5994.166667                10.0  57.0   \n",
      "2        1003.0                2725    7076.875000                 9.0  50.0   \n",
      "3        1004.0                2760   69083.000000                50.0  50.0   \n",
      "4        1005.0                2217    8427.461538                 4.0  50.0   \n",
      "..          ...                 ...            ...                 ...   ...   \n",
      "115      1116.0                3649   10645.833333                 2.0  43.0   \n",
      "116      1117.0                2817    8126.666667                 6.0  58.0   \n",
      "117      1118.0                1974    4234.055556                38.0  59.0   \n",
      "118      1119.0                2371    4394.714286                 5.0  48.0   \n",
      "119      1120.0                2992    8622.125000                47.0  56.0   \n",
      "\n",
      "    AgeGroup  AnnualIncome IncomeBracket  SpendingScore SpendingCategory  \\\n",
      "0      18-30      118266.0     Very High           98.0             High   \n",
      "1      46-60       71930.0          High           39.0           Medium   \n",
      "2      46-60      113230.0     Very High           43.0           Medium   \n",
      "3      46-60       69083.0          High           15.0              Low   \n",
      "4      46-60      109557.0     Very High           52.0           Medium   \n",
      "..       ...           ...           ...            ...              ...   \n",
      "115    31-45       63875.0           Mid           40.0           Medium   \n",
      "116    46-60       48760.0           Mid           43.0           Medium   \n",
      "117    46-60       76213.0          High           28.0              Low   \n",
      "118    46-60       61526.0           Mid           15.0              Low   \n",
      "119    46-60       68977.0          High           57.0           Medium   \n",
      "\n",
      "     IncomePerOrder  \n",
      "0      29566.500000  \n",
      "1       5994.166667  \n",
      "2       7076.875000  \n",
      "3      69083.000000  \n",
      "4       8427.461538  \n",
      "..              ...  \n",
      "115    10645.833333  \n",
      "116     8126.666667  \n",
      "117     4234.055556  \n",
      "118     4394.714286  \n",
      "119     8622.125000  \n",
      "\n",
      "[120 rows x 11 columns]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\KIshan\\AppData\\Local\\Temp\\ipykernel_21416\\3832790332.py:157: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  feature_data[\"AvgOrderValue\"].replace([np.inf, -np.inf], np.nan, inplace=True)\n",
      "C:\\Users\\KIshan\\AppData\\Local\\Temp\\ipykernel_21416\\3832790332.py:185: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  feature_data[\"IncomePerOrder\"].replace([np.inf, -np.inf], np.nan, inplace=True)\n"
     ]
    }
   ],
   "source": [
    "# 1 Essential imports\n",
    "import pandas as pd\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv(\"ecommerce_customers_large.csv\")\n",
    "\n",
    "# 2 Initial exploration\n",
    "print(\"Shape:\", df.shape)\n",
    "print(\"Memory usage:\", f\"{df.memory_usage(deep=True).sum()/(1024**2):.2f} MB\")\n",
    "print(df.info())\n",
    "\n",
    "# 3 Missing values per column\n",
    "print(\"\\nMissing values:\\n\", df.isnull().sum())\n",
    "\n",
    "# 4 Data types\n",
    "print(\"\\nData types:\\n\", df.dtypes)\n",
    "\n",
    "# 5 Duplicates\n",
    "dupe_count = df.duplicated().sum()\n",
    "print(f\"\\nDuplicate rows: {dupe_count}\")\n",
    "\n",
    "# 6 Basic numeric stats\n",
    "print(\"\\nNumeric summary:\\n\", df.describe())\n",
    "\n",
    "# 7 Categorical summary\n",
    "cat_cols = df.select_dtypes(include=['object', 'category']).columns\n",
    "for col in cat_cols:\n",
    "    print(f\"\\nColumn '{col}' unique values: {df[col].nunique()}\")\n",
    "    print(df[col].value_counts(dropna=False).head())\n",
    "\n",
    "# 8 Additional checks (based on best practices) :contentReference[oaicite:1]{index=1}\n",
    "#    • Range checks for numeric columns (e.g., Age or Income)\n",
    "for col in df.select_dtypes(include=['int', 'float']).columns:\n",
    "    print(f\"\\nOut-of-range values in '{col}':\")\n",
    "    lower, upper = df[col].mean() - 3*df[col].std(), df[col].mean() + 3*df[col].std()\n",
    "    print(df[(df[col] < lower) | (df[col] > upper)][col].head())\n",
    "\n",
    "#    • Domain checks for category columns\n",
    "# Example for Gender\n",
    "valid_genders = ['Male', 'Female']\n",
    "print(\"\\nInvalid Gender entries:\\n\", df[~df['Gender'].isin(valid_genders)]['Gender'].unique())\n",
    "\n",
    "#    • Format checks (e.g., emails, if present)\n",
    "#    • Length checks, completeness, foreign key constraints, etc. :contentReference[oaicite:2]{index=2}\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# 1️⃣ Load data\n",
    "df = pd.read_csv(\"ecommerce_customers_large.csv\")\n",
    "\n",
    "# ⭕ 1. Handle Missing Values\n",
    "print(\"Missing values per column:\\n\", df.isnull().sum())\n",
    "# Strategy: For object columns, fill with mode; for numeric, median\n",
    "for col in df.columns:\n",
    "    if df[col].isnull().any():\n",
    "        if df[col].dtype == 'object':\n",
    "            df[col].fillna(df[col].mode()[0], inplace=True)\n",
    "        else:\n",
    "            df[col].fillna(df[col].median(), inplace=True)\n",
    "\n",
    "# 🟢 2. Remove Duplicates\n",
    "print(\"Duplicates before:\", df.duplicated().sum())\n",
    "df = df.drop_duplicates(keep='first')  # you can use subset=[...] or keep='last'/False :contentReference[oaicite:1]{index=1}\n",
    "print(\"Duplicates after:\", df.duplicated().sum())\n",
    "\n",
    "# 🔢 3. Fix Data Types\n",
    "print(\"Before types:\\n\", df.dtypes)\n",
    "# Convert numeric-like strings to numbers\n",
    "for col in df.select_dtypes(include='object').columns:\n",
    "    df[col] = pd.to_numeric(df[col], errors='ignore')\n",
    "# Convert date columns if present\n",
    "# df['DateCol'] = pd.to_datetime(df['DateCol'], errors='coerce')\n",
    "# Standardize text fields\n",
    "for col in df.select_dtypes(include='object').columns:\n",
    "    df[col] = df[col].str.strip().str.lower()\n",
    "print(\"After types:\\n\", df.dtypes)\n",
    "\n",
    "# 🧹 4. Clean Text Data\n",
    "# E.g., if name, phone, email columns exist:\n",
    "# df['Name'] = df['Name'].str.title().str.strip()\n",
    "# df['Phone'] = df['Phone'].str.replace(r'\\D+', '', regex=True)\n",
    "# df['Email'] = df['Email'].str.lower().str.strip()\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "\n",
    "# Load cleaned data\n",
    "df = pd.read_csv(\"ecommerce_customers_large.csv\")\n",
    "\n",
    "# Select only numeric columns\n",
    "num_cols = df.select_dtypes(include=np.number).columns\n",
    "\n",
    "# Store results for documentation\n",
    "outlier_summary = {}\n",
    "\n",
    "for col in num_cols:\n",
    "    col_data = df[col].dropna()\n",
    "    \n",
    "    # IQR Method\n",
    "    Q1 = col_data.quantile(0.25)\n",
    "    Q3 = col_data.quantile(0.75)\n",
    "    IQR = Q3 - Q1\n",
    "    lower_bound = Q1 - 1.5 * IQR\n",
    "    upper_bound = Q3 + 1.5 * IQR\n",
    "    iqr_outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)][col]\n",
    "    \n",
    "    # Z-Score Method\n",
    "    z_scores = np.abs(stats.zscore(col_data))\n",
    "    zscore_outliers = df[(z_scores > 3)][col]  # Z-score threshold = 3\n",
    "    \n",
    "    # Combine\n",
    "    total_outliers = set(iqr_outliers.index).union(set(zscore_outliers.index))\n",
    "    outlier_count = len(total_outliers)\n",
    "    total_count = df.shape[0]\n",
    "    percent = round((outlier_count / total_count) * 100, 2)\n",
    "\n",
    "    # Decision logic (example): Cap if <5%, else flag for review\n",
    "    if percent < 5:\n",
    "        df[col] = np.where(df[col] > upper_bound, upper_bound,\n",
    "                           np.where(df[col] < lower_bound, lower_bound, df[col]))\n",
    "        decision = \"Capped\"\n",
    "    else:\n",
    "        decision = \"Needs Review\"\n",
    "\n",
    "    # Document decisions\n",
    "    outlier_summary[col] = {\n",
    "        \"Outlier_Count\": outlier_count,\n",
    "        \"Total_Rows\": total_count,\n",
    "        \"Percent\": percent,\n",
    "        \"Decision\": decision,\n",
    "        \"IQR_Bounds\": (round(lower_bound, 2), round(upper_bound, 2))\n",
    "    }\n",
    "\n",
    "# Save treated dataset\n",
    "df.to_csv(\"outlier_treated_ecommerce_customers.csv\", index=False)\n",
    "\n",
    "# Print documentation\n",
    "print(\"📊 Outlier Treatment Summary:\")\n",
    "for col, info in outlier_summary.items():\n",
    "    print(f\"\\n▶ Column: {col}\")\n",
    "    for key, val in info.items():\n",
    "        print(f\"   - {key}: {val}\")\n",
    "        # ---------------------------------\n",
    "# Begin Feature Engineering\n",
    "# ---------------------------------\n",
    "feature_data = df.copy()\n",
    "\n",
    "# 1. Customer Tenure (simulate registration date)\n",
    "np.random.seed(42)\n",
    "feature_data[\"RegistrationDate\"] = pd.to_datetime(\n",
    "    np.random.choice(pd.date_range(\"2015-01-01\", \"2022-01-01\"), size=len(feature_data))\n",
    ")\n",
    "feature_data[\"CustomerTenureDays\"] = (pd.Timestamp.today() - feature_data[\"RegistrationDate\"]).dt.days\n",
    "\n",
    "# 2. Average Order Value\n",
    "feature_data[\"AvgOrderValue\"] = feature_data[\"AnnualIncome\"] / feature_data[\"PurchaseFrequency\"]\n",
    "feature_data[\"AvgOrderValue\"].replace([np.inf, -np.inf], np.nan, inplace=True)\n",
    "\n",
    "# 3. Days Since Last Order (renamed)\n",
    "feature_data.rename(columns={\"LastPurchaseDaysAgo\": \"DaysSinceLastOrder\"}, inplace=True)\n",
    "\n",
    "# 4. Age Groups\n",
    "feature_data[\"AgeGroup\"] = pd.cut(\n",
    "    feature_data[\"Age\"],\n",
    "    bins=[0, 18, 30, 45, 60, 100],\n",
    "    labels=[\"<18\", \"18-30\", \"31-45\", \"46-60\", \"60+\"]\n",
    ")\n",
    "\n",
    "# 5. Income Brackets (quartiles)\n",
    "feature_data[\"IncomeBracket\"] = pd.qcut(\n",
    "    feature_data[\"AnnualIncome\"],\n",
    "    q=4,\n",
    "    labels=[\"Low\", \"Mid\", \"High\", \"Very High\"]\n",
    ")\n",
    "\n",
    "# 6. Spending Categories (based on SpendingScore)\n",
    "feature_data[\"SpendingCategory\"] = pd.cut(\n",
    "    feature_data[\"SpendingScore\"],\n",
    "    bins=[-1, 30, 60, 100],\n",
    "    labels=[\"Low\", \"Medium\", \"High\"]\n",
    ")\n",
    "\n",
    "# 7. Interaction Feature: Income Per Order\n",
    "feature_data[\"IncomePerOrder\"] = feature_data[\"AnnualIncome\"] / feature_data[\"PurchaseFrequency\"]\n",
    "feature_data[\"IncomePerOrder\"].replace([np.inf, -np.inf], np.nan, inplace=True)\n",
    "\n",
    "# ---------------------------------\n",
    "# View Result\n",
    "# ---------------------------------\n",
    "print(feature_data[[\n",
    "    \"CustomerID\", \"CustomerTenureDays\", \"AvgOrderValue\", \"DaysSinceLastOrder\",\n",
    "    \"Age\", \"AgeGroup\", \"AnnualIncome\", \"IncomeBracket\",\n",
    "    \"SpendingScore\", \"SpendingCategory\", \"IncomePerOrder\"\n",
    "]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e76c5c9c-8345-44da-b509-ec54ac117b4e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
